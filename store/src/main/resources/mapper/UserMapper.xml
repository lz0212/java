<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.cy.store.mapper.UserMapper">

<!-- resultMap当表格中的资源和类的对象属性的字段不一致时 resultType相同时使用   -->
    <resultMap id="UserEntityMap" type="com.cy.store.pojo.User">
        <id column="uid" property="uid"/>
<!--   column是表格中的资源名称   property实体类中的资源属性   -->
        <result column="is_delete" property="isDelete"/>
        <result column="created_user" property="createdUser"/>
        <result column="created_time" property="createdTime"/>
        <result column="modified_user" property="modifiedUser"/>
        <result column="modified_time" property="modifiedTime"/>
    </resultMap>

    <!-- 插入用户数据：Integer insert(User user) -->
    <insert id="insert" useGeneratedKeys="true" keyProperty="uid">
        insert into t_user (username, password, salt, phone, email, gender, avatar, is_delete, created_user, created_time, modified_user, modified_time)
                 values (#{username}, #{password}, #{salt}, #{phone}, #{email}, #{gender}, #{avatar}, #{isDelete}, #{createdUser}, #{createdTime}, #{modifiedUser}, #{modifiedTime})
    </insert>
    <insert id="save" useGeneratedKeys="true" keyProperty="uid">
        insert into t_user (username, password, salt, phone, email, gender, avatar, is_delete, created_user, created_time, modified_user, modified_time)
        values (#{username}, #{password}, #{salt}, #{phone}, #{email}, #{gender}, #{avatar}, #{isDelete}, #{createdUser}, #{createdTime}, #{modifiedUser}, #{modifiedTime})
    </insert>


    <!-- 根据uid更新用户的密码：
             Integer updatePasswordByUid(
                @Param("uid") Integer uid,
                @Param("password") String password,
                @Param("modifiedUser") String modifiedUser,
                @Param("modifiedTime") Date modifiedTime) -->
    <update id="updatePasswordByUid" >
        update t_user
            set
                password = #{password},
                modified_user = #{modifiedUser},
                modified_time = #{modifiedTime}
        where uid = #{uid}
    </update>

    <!-- 根据uid更新用户个人资料：Integer updateInfoByUid(User user) -->
    <update id="updateinfoByUid">
        update t_user
        SET
        <if test="phone != null">phone = #{phone},</if>
        <if test="email != null">email = #{email},</if>
        <if test="gender != null">gender = #{gender},</if>
        modified_user = #{modifiedUser},
        modified_time = #{modifiedTime}
        where uid = #{uid}
    </update>

    <!-- 根据uid更新用户的头像
             Integer updateAvatarByUid(
                @Param("uid") Integer uid,
                @Param("avatar") String avatar,
                @Param("modifiedUser") String modifiedUser,
                @Param("modifiedTime") Date modifiedTime) -->
    <update id="updateAvatarByUid">
        update t_user
            set
                avatar = #{avatar},
                modified_user = #{modifiedUser},
                modified_time = #{modifiedTime}
        where uid = #{uid}
    </update>

    <!-- 根据用户名查询用户数据：User findByUsername(String username) -->
    <select id="fidByUsername" resultMap="UserEntityMap">
        select * from t_user where username = #{username}
    </select>

    <select id="getAll" resultMap="UserEntityMap">
        select * from t_user
    </select>

    <select id="denglu" resultMap="UserEntityMap">
        select * from t_user
        <where>
            <if test="username != null and username != '' ">
                and username = #{username}
            </if>
            <if test="password != null and password != ''">
                and password like #{password}
            </if>
        </where>
    </select>

    <!-- 根据用户id查询用户数据：User findByUid(Integer uid) -->
    <select id="findByUid" resultMap="UserEntityMap">
        select * from t_user where uid = #{uid}
    </select>

</mapper>